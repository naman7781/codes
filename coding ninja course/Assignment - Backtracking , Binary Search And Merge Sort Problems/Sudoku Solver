Given a 9*9 sudoku board, in which some entries are filled and others are 0 (0 indicates that the cell is empty), you need to find out whether the Sudoku puzzle can be solved or not i.e. return true or false.
Input Format :
9 Lines where ith line contains ith row elements separated by space
Output Format :
 true or false
Sample Input :
9 0 0 0 2 0 7 5 0 
6 0 0 0 5 0 0 4 0 
0 2 0 4 0 0 0 1 0 
2 0 8 0 0 0 0 0 0 
0 7 0 5 0 9 0 6 0 
0 0 0 0 0 0 4 0 1 
0 1 0 0 0 5 0 8 0 
0 9 0 0 7 0 0 0 4 
0 8 2 0 4 0 0 0 6
Sample Output :
true

code------------------------------------------

#include<bits/stdc++.h>
using namespace std;


/// pass row and col by reference
bool findEmpty(int board[][9],int& row,int& col){
    for(int i=0;i<9;i++){
        for(int j=0;j<9;j++){
            if(board[i][j]==0){
                /// set the values of empty row and col
                row = i;
                col = j;
                return true;
            }
        }
    }
    return false;
}
bool isSafeRow(int board[][9],int row,int num){
    for(int i=0;i<9;i++){
        if(board[row][i]==num){
            return false;
        }
    }
    return true;

}
bool isSafeCol(int board[][9],int col,int num){
    for(int i=0;i<9;i++){
        if(board[i][col]==num){
            return false;
        }
    }
    return true;
}
bool isSafeBox(int board[][9],int row,int col,int num){
    int row_factor=row-(row%3);
    int col_factor=col-(col%3);
    
    // here i & j will be upto 3 not upto 9
    for(int i=0;i<3;i++){
        for(int j=0;j<3;j++){
            if(board[i+row_factor][j+col_factor]==num){
                return false;
            }
        }
    }
    return true;
}
bool isSafe(int board[][9],int row,int col,int num){
    if(isSafeRow(board,row,num) && isSafeCol(board,col,num) && isSafeBox(board,row,col,num)){
        return true;
    }
    return false;
}
bool sudokuSolver(int board[][9]){
    int row,col;
    if(!findEmpty(board,row,col)){
        return true;
    }
    /// here i should be from 1 to 9.. not 0 to 8
    for(int i=1;i<=9;i++){
        if(isSafe(board,row,col,i)){
            board[row][col]=i;
            if(sudokuSolver(board)){
                return true;
            }
            
            /// mark the row and col as empty again
            board[row][col] = 0;
        }
    }


    return false;

}
